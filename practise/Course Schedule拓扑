这道题用拓扑排序来做，到底能不能排成功的本质其实就是把所有没有入度的点都挑出来，
对于一张图G={V,E}；
1.找到一个入度为0的点p
2.把p和它的出度都拔掉，行成G'
3.递归求解G'的topological order, 然后接在p的后面形成G的topological order

1.初始将所有入度为0的点都推入queue
2.从queue中取出元素p
3.将p的出度都移除掉，并维护各个点的入度值。
4.如果某点在上步执行后入度变为0，则将该点推入queue
5.若queue不为空，则回到步骤2
6.算法结束时，取出的顺序则为一组解。
会不会有特例呢？
如果算法给出一组解，这组解一定合法
如果算法给出的不是一组解，只有一种可能
  步骤5中queue已经空了，但是还有点还没有被拜访过。
此时代表图中剩余的点必定都至少有一个入度。图上必定存在还。
n个点，n - 1条边的连通图必定是一棵树

在一个有环的图上，不可能存在topological order
topological sort其实完成了directed acyclic gragh(有向无环图)的判定，当然也可以用来判定一个有向图是否有环。

另一种算法是time stamp，时间戳记。
在进入dfs的过程中，我们会进入一个点，在该点停留一段时间，在这段期间会拜访所有的该点的子孙们，离开该点

所以这里用一个course数组来记录每一门课的入度值。
其实这里是可以用map的，但是因为题目里面说There are a total of n courses you have to take, labeled from 0 to n - 1.
所以用数组就够了！
然后按照算法来，如果每一个点都可以在queue里面走一遍，就说明是没有环的。
因为如果有的点没有进入queue，说明那么他们一定存在入度，那么久一定有环。
所以用一个计数器记录一共有多少个点，然后看是否相等。
public class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (prerequisites == null) {
            return false;
        }
        int len = prerequisites.length;
        if (numCourses == 0 || len == 0) {
            return true;
        }
        int[] pCounter = new int[numCourses];
        for (int i = 0; i < len; i++) {
            pCounter[prerequisites[i][0]]++;
        }
        LinkedList<Integer> queue = new LinkedList<Integer>();
        for (int i = 0; i < numCourses; i++) {
            if (pCounter[i] == 0) {
                queue.add(i);// no prequsite
            }
        }
        int numNoPre = queue.size();
        while(!queue.isEmpty()) {
            int top = queue.remove();
            for (int i = 0; i < len; i++) {
                if (prerequisites[i][1] == top) {
                    pCounter[prerequisites[i][0]]--;
                    if (pCounter[prerequisites[i][0]] == 0) {
                        numNoPre++;
                        queue.add(prerequisites[i][0]);//
                    }
                }
            }
        }
        return numNoPre == numCourses;
    }
}
